{
"version":3,
"file":"compile/accepts.js",
"lineCount":457,
"mappings":"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",
"sources":["node_modules/@goa/negotiator/src/lib/charset.js","node_modules/@goa/negotiator/src/lib/encoding.js","node_modules/@goa/negotiator/src/lib/language.js","node_modules/@goa/negotiator/src/lib/mediaType.js","node_modules/@goa/negotiator/src/index.js","node_modules/path/index.js","node_modules/@goa/mime-types/src/index.js","src/index.js","src/depack.js"],
"sourcesContent":["const simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/\n\n/**\n * Parse the Accept-Charset header.\n * @param {string} accept\n * @private\n */\nfunction parseAcceptCharset(accept) {\n  const accepts = accept.split(',')\n\n  const res = accepts.map((a, i) => {\n    const charset = parseCharset(a.trim(), i)\n    if (charset) return charset\n  }).filter(Boolean)\n\n  return res\n}\n\n/**\n * Parse a charset from the Accept-Charset header.\n * @param {string} str\n * @param {number} i\n * @private\n */\nfunction parseCharset(str, i) {\n  const match = simpleCharsetRegExp.exec(str)\n  if (!match) return null\n\n  const charset = match[1]\n  let q = 1\n  if (match[2]) {\n    const params = match[2].split(';')\n    for (let j = 0; j < params.length; j++) {\n      const p = params[j].trim().split('=')\n      if (p[0] == 'q') {\n        q = parseFloat(p[1])\n        break\n      }\n    }\n  }\n\n  return { charset, q, i }\n}\n\n/**\n * Get the priority of a charset.\n * @param {string} charset\n * @param {!Array<{ i: number, q: number, charset: string }>} accepted\n * @param {number} index\n */\nfunction getCharsetPriority(charset, accepted, index) {\n  let priority = { o: -1, q: 0, s: 0 }\n\n  for (let i = 0; i < accepted.length; i++) {\n    const spec = specify(charset, accepted[i], index)\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec\n    }\n  }\n\n  return priority\n}\n\n/**\n * Get the specificity of the charset.\n * @param {string} charset\n * @param {{ i: number, q: number, charset: string }} spec\n * @private\n */\nfunction specify(charset, spec, i) {\n  let s = 0\n  if(spec.charset.toLowerCase() === charset.toLowerCase()){\n    s |= 1\n  } else if (spec.charset != '*' ) return null\n\n  return {\n    i,\n    s,\n    o: spec.i,\n    q: spec.q,\n  }\n}\n\n/**\n * Get the preferred charsets from an Accept-Charset header.\n * @param {string} [accept]\n * @param {!Array<string>} [provided]\n */\nexport default function preferredCharsets(accept, provided) {\n  // RFC 2616 sec 14.2: no header = *\n  const accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '')\n\n  if (!provided) {\n    // sorted list of all charsets\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullCharset)\n  }\n\n  const priorities = provided.map((type, i) => {\n    return getCharsetPriority(type, accepts, i)\n  })\n\n  // sorted list of accepted charsets\n  return priorities.filter(isQuality).sort(compareSpecs).map((priority) => {\n    return provided[priorities.indexOf(priority)]\n  })\n}\n\n/**\n * Compare two specs.\n * @param {{ i: number, q: number, charset: string, o: number, s: number }} a\n * @param {{ i: number, q: number, charset: string, o: number, s: number }} b\n * @private\n */\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0\n}\n\n/**\n * Get full charset string.\n * @param {{ charset: string }} spec\n * @private\n */\nfunction getFullCharset(spec) {\n  return spec.charset\n}\n\n/**\n * Check if a spec has any quality.\n * @param {{ q: number }} spec\n * @private\n */\nfunction isQuality(spec) {\n  return spec.q > 0\n}\n","const simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/\n\n/**\n * Parse the Accept-Encoding header.\n * @private\n */\n\nfunction parseAcceptEncoding(accept) {\n  var accepts = accept.split(',')\n  var hasIdentity = false\n  var minQuality = 1\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var encoding = parseEncoding(accepts[i].trim(), i)\n\n    if (encoding) {\n      accepts[j++] = encoding\n      hasIdentity = hasIdentity || specify('identity', encoding, undefined)\n      minQuality = Math.min(minQuality, encoding.q || 1)\n    }\n  }\n\n  if (!hasIdentity) {\n    /*\n     * If identity doesn't explicitly appear in the accept-encoding header,\n     * it's added to the list of acceptable encoding with the lowest q\n     */\n    accepts[j++] = {\n      encoding: 'identity',\n      q: minQuality,\n      i: i,\n    }\n  }\n\n  // trim accepts\n  accepts.length = j\n\n  return accepts\n}\n\n/**\n * Parse an encoding from the Accept-Encoding header.\n * @private\n */\n\nfunction parseEncoding(str, i) {\n  var match = simpleEncodingRegExp.exec(str)\n  if (!match) return null\n\n  var encoding = match[1]\n  var q = 1\n  if (match[2]) {\n    var params = match[2].split(';')\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=')\n      if (p[0] == 'q') {\n        q = parseFloat(p[1])\n        break\n      }\n    }\n  }\n\n  return {\n    encoding: encoding,\n    q: q,\n    i: i,\n  }\n}\n\n/**\n * Get the priority of an encoding.\n * @private\n */\n\nfunction getEncodingPriority(encoding, accepted, index) {\n  var priority = { o: -1, q: 0, s: 0 }\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(encoding, accepted[i], index)\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec\n    }\n  }\n\n  return priority\n}\n\n/**\n * Get the specificity of the encoding.\n * @private\n */\n\nfunction specify(encoding, spec, index) {\n  var s = 0\n  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){\n    s |= 1\n  } else if (spec.encoding !== '*' ) {\n    return null\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s,\n  }\n}\n\n/**\n * Get the preferred encodings from an Accept-Encoding header.\n * @public\n */\nexport default function preferredEncodings(accept, provided) {\n  var accepts = parseAcceptEncoding(accept || '')\n\n  if (!provided) {\n    // sorted list of all encodings\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullEncoding)\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getEncodingPriority(type, accepts, index)\n  })\n\n  // sorted list of accepted encodings\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n    return provided[priorities.indexOf(priority)]\n  })\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0\n}\n\n/**\n * Get full encoding string.\n * @private\n */\n\nfunction getFullEncoding(spec) {\n  return spec.encoding\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0\n}","const simpleLanguageRegExp = /^\\s*([^\\s\\-;]+)(?:-([^\\s;]+))?\\s*(?:;(.*))?$/\n\n/**\n * Parse the Accept-Language header.\n * @private\n */\nfunction parseAcceptLanguage(accept) {\n  var accepts = accept.split(',')\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var language = parseLanguage(accepts[i].trim(), i)\n\n    if (language) {\n      accepts[j++] = language\n    }\n  }\n\n  // trim accepts\n  accepts.length = j\n\n  return accepts\n}\n\n/**\n * Parse a language from the Accept-Language header.\n * @private\n */\nfunction parseLanguage(str, i) {\n  var match = simpleLanguageRegExp.exec(str)\n  if (!match) return null\n\n  var prefix = match[1],\n    suffix = match[2],\n    full = prefix\n\n  if (suffix) full += \"-\" + suffix\n\n  var q = 1\n  if (match[3]) {\n    var params = match[3].split(';')\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].split('=')\n      if (p[0] == 'q') q = parseFloat(p[1])\n    }\n  }\n\n  return { prefix, suffix, q, i, full }\n}\n\n/**\n * Get the priority of a language.\n * @private\n */\nfunction getLanguagePriority(language, accepted, index) {\n  var priority = { o: -1, q: 0, s: 0 }\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(language, accepted[i], index)\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec\n    }\n  }\n\n  return priority\n}\n\n/**\n * Get the specificity of the language.\n * @private\n */\n\nfunction specify(language, spec, index) {\n  var p = parseLanguage(language, undefined)\n  if (!p) return null\n  var s = 0\n  if(spec.full.toLowerCase() === p.full.toLowerCase()){\n    s |= 4\n  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {\n    s |= 2\n  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {\n    s |= 1\n  } else if (spec.full !== '*' ) {\n    return null\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s,\n  }\n}\n\n/**\n * Get the preferred languages from an Accept-Language header.\n * @public\n */\nexport default function preferredLanguages(accept, provided) {\n  // RFC 2616 sec 14.4: no header = *\n  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '')\n\n  if (!provided) {\n    // sorted list of all languages\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullLanguage)\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getLanguagePriority(type, accepts, index)\n  })\n\n  // sorted list of accepted languages\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {\n    return provided[priorities.indexOf(priority)]\n  })\n}\n\n/**\n * Compare two specs.\n * @private\n */\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0\n}\n\n/**\n * Get full language string.\n * @private\n */\nfunction getFullLanguage(spec) {\n  return spec.full\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\nfunction isQuality(spec) {\n  return spec.q > 0\n}","const simpleMediaTypeRegExp = /^\\s*([^s/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/\n\n/**\n * Parse the Accept header.\n * @private\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept)\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i)\n\n    if (mediaType) {\n      accepts[j++] = mediaType\n    }\n  }\n\n  // trim accepts\n  accepts.length = j\n\n  return accepts\n}\n\n/**\n * Parse a media type from the Accept header.\n * @private\n */\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str)\n  if (!match) return null\n\n  var params = Object.create(null)\n  var q = 1\n  var subtype = match[2]\n  var type = match[1]\n\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair)\n\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j]\n      var key = pair[0].toLowerCase()\n      var val = pair[1]\n\n      // get the value, unwrapping quotes\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\n        ? val.substr(1, val.length - 2)\n        : val\n\n      if (key === 'q') {\n        q = parseFloat(value)\n        break\n      }\n\n      // store parameter\n      params[key] = value\n    }\n  }\n\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i,\n  }\n}\n\n/**\n * Get the priority of a media type.\n * @private\n */\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = { o: -1, q: 0, s: 0 }\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index)\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec\n    }\n  }\n\n  return priority\n}\n\n/**\n * Get the specificity of the media type.\n * @private\n */\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type, undefined)\n  var s = 0\n\n  if (!p) {\n    return null\n  }\n\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4\n  } else if(spec.type != '*') {\n    return null\n  }\n\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2\n  } else if(spec.subtype != '*') {\n    return null\n  }\n\n  var keys = Object.keys(spec.params)\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase()\n    })) {\n      s |= 1\n    } else {\n      return null\n    }\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s,\n  }\n}\n\nexport default function preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '')\n\n  if (!provided) {\n    // sorted list of all types\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullType)\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index)\n  })\n\n  // sorted list of accepted types\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)]\n  })\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0\n}\n\n/**\n * Get full type string.\n * @private\n */\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0\n}\n\n/**\n * Count the number of quotes in a string.\n * @private\n */\n\nfunction quoteCount(string) {\n  var count = 0\n  var index = 0\n\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++\n    index++\n  }\n\n  return count\n}\n\n/**\n * Split a key value pair.\n * @private\n */\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=')\n  var key\n  var val\n\n  if (index === -1) {\n    key = str\n  } else {\n    key = str.substr(0, index)\n    val = str.substr(index + 1)\n  }\n\n  return [key, val]\n}\n\n/**\n * Split an Accept header into media types.\n * @private\n */\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',')\n\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i]\n    } else {\n      accepts[j] += ',' + accepts[i]\n    }\n  }\n\n  // trim accepts\n  accepts.length = j + 1\n\n  return accepts\n}\n\n/**\n * Split a string of parameters.\n * @private\n */\n\nfunction splitParameters(str) {\n  var parameters = str.split(';')\n\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i]\n    } else {\n      parameters[j] += ';' + parameters[i]\n    }\n  }\n\n  // trim parameters\n  parameters.length = j + 1\n\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim()\n  }\n\n  return parameters\n}\n","import preferredCharsets from './lib/charset'\nimport preferredEncodings from './lib/encoding'\nimport preferredLanguages from './lib/language'\nimport preferredMediaTypes from './lib/mediaType'\nimport * as http from 'http' // eslint-disable-line\n\n/**\n * @implements {_goa.Negotiator}\n */\nexport default class Negotiator {\n  /** @param {!http.IncomingMessage} request */\n  constructor(request) {\n    this.request = request\n    this.headers = /** @type {!Object} */ (this.request.headers)\n  }\n  /** @param {!Array<string>} [available] */\n  charset(available) {\n    const set = this.charsets(available)\n    return set && set[0]\n  }\n  /** @param {!Array<string>} [available] */\n  charsets(available) {\n    return preferredCharsets(this.headers['accept-charset'], available)\n  }\n  /** @param {!Array<string>} [available] */\n  encoding(available) {\n    var set = this.encodings(available)\n    return set && set[0]\n  }\n  /** @param {!Array<string>} [available] */\n  encodings(available) {\n    return preferredEncodings(this.headers['accept-encoding'], available)\n  }\n  /** @param {!Array<string>} [available] */\n  language(available) {\n    var set = this.languages(available)\n    return set && set[0]\n  }\n  /** @param {!Array<string>} [available] */\n  languages(available) {\n    return preferredLanguages(this.headers['accept-language'], available)\n  }\n  /** @param {!Array<string>} [available] */\n  mediaType(available) {\n    var set = this.mediaTypes(available)\n    return set && set[0]\n  }\n  /** @param {!Array<string>} [available] */\n  mediaTypes(available) {\n    return preferredMediaTypes(this.headers['accept'], available)\n  }\n}\n\n/**\n * @license MIT\n * Copyright(c) 2012 Federico Romero\n * Copyright(c) 2012-2014 Isaac Z. Schlueter\n * Copyright(c) 2015 Douglas Christopher Wilson\n * https://npmjs.org/negotiator\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingMessage} http.IncomingMessage\n */","export default path\nexport const {\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  isAbsolute,\n  join,\n  normalize,\n  parse,\n  posix,\n  relative,\n  resolve,\n  sep,\n  win32,\n} = path","const db = require(/* ok depack*/ 'mime-db')\nimport { extname } from 'path'\n\nconst EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nconst TEXT_TYPE_REGEXP = /^text\\//i\n\nexport const charsets = { 'lookup': charset }\n\nexport const extensions = Object.create(null)\nexport const types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(extensions, types)\n\n/**\n * Get the default charset for a MIME type.\n * @param {string} type\n * @return {boolean|string}\n */\nexport function charset(type) {\n  if (!type || typeof type != 'string') return false\n\n  // TODO: use media-typer\n  const match = EXTRACT_TYPE_REGEXP.exec(type)\n  const mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime['charset']) return mime['charset']\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) return 'UTF-8'\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n * @param {string} str\n * @return {boolean|string}\n */\nexport function contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str != 'string') return false\n\n  let mime = str.indexOf('/') == -1\n    ? lookup(str)\n    : str\n\n  if (!mime) return false\n\n  let m = /** @type {string} */ (mime)\n  // TODO: use content-type or other module\n  if (!m.includes('charset')) {\n    const c = charset(m)\n    if (c) m += '; charset=' + c.toLowerCase()\n  }\n\n  return m\n}\n\n/**\n * Get the default extension for a MIME type.\n * @param {string} type\n * @return {boolean|string}\n */\nexport function extension(type) {\n  if (!type || typeof type != 'string') return false\n\n  // TODO: use media-typer\n  const match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  const exts = match && extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) return false\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n * @param {string} path\n * @return {boolean|string}\n */\nexport function lookup(path) {\n  if (!path || typeof path != 'string') return false\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  let e = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!e) return false\n\n  return types[e] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\nfunction populateMaps(es, ts) {\n  // source preference (least -> most)\n  const preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach((type) => {\n    const mime = db[type]\n    const exts = mime['extensions']\n\n    if (!exts || !exts.length) return\n\n    // mime -> extensions\n    es[type] = exts\n\n    // extension -> mime\n    for (let i = 0; i < exts.length; i++) {\n      const e = exts[i]\n\n      if (ts[e]) {\n        const from = preference.indexOf(db[ts[e]]['source'])\n        const to = preference.indexOf(mime['source'])\n\n        if (ts[e] != 'application/octet-stream' &&\n          (from > to || (from == to && ts[e].substr(0, 12) == 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      ts[e] = type\n    }\n  })\n}\n\n/**\n * @license MIT\n * Copyright (c) 2014 Jonathan Ong <me@jongleberry.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n * https://npmjs.com/package/mime-types\n */","import Negotiator from '@goa/negotiator'\nimport { lookup } from '@goa/mime-types'\n\n/**\n * @implements {_goa.Accepts}\n */\nexport default class Accepts {\n  /**\n   * Create a new Accepts object for the given req.\n   * @param {!http.IncomingMessage} req\n   */\n  constructor(req) {\n    this.headers = /** @type {!Object} */ (req.headers)\n    this.negotiator = new Negotiator(req)\n  }\n  /**\n   * Check if the given `type(s)` is acceptable, returning the best match when true, otherwise `false`, in which case you should respond with 406 \"Not Acceptable\".\n   *\n   * The `type` value may be a single mime type string such as \"application/json\", the extension name such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list or array is given the _best_ match, if any is returned. When no types are given as arguments, returns all types accepted by the client in the preference order.\n   *\n   * @param {string|!Array<string>} [types] A single or multiple types, either as an array or variable arguments.\n   * @param {...string} args\n   */\n  types(types, ...args) {\n    // support flattened arguments\n    if (types && !Array.isArray(types)) {\n      types = [types, ...args]\n    }\n\n    // no types, return all requested types\n    if (!types || types.length == 0) {\n      return this.negotiator.mediaTypes()\n    }\n\n    // no accept header, return first given type\n    if (!this.headers['accept']) {\n      return types[0]\n    }\n\n    const mimes = types.map(extToMime)\n    const accepts = this.negotiator.mediaTypes(mimes.filter(validMime))\n    const [first] = accepts\n\n    return first\n      ? types[mimes.indexOf(first)]\n      : false\n  }\n  get type() {\n    return this.types\n  }\n  /**\n   * Return accepted encodings or best fit based on `encodings`.\n   *\n   * Given `Accept-Encoding: gzip, deflate`\n   * an array sorted by quality is returned:\n   *\n   *     ['gzip', 'deflate']\n   *\n   * @param {string|!Array<string>} [encodings]\n   * @param {...string} args\n   */\n  encodings(encodings, ...args) {\n    // support flattened arguments\n    if (encodings && !Array.isArray(encodings)) {\n      encodings = [encodings, ...args]\n    }\n\n    // no encodings, return all requested encodings\n    if (!encodings || encodings.length == 0) {\n      return this.negotiator.encodings()\n    }\n\n    return this.negotiator.encodings( /** @type {!Array<string>} */\n      (encodings))[0] || false\n  }\n  get encoding() {\n    return this.encodings\n  }\n  /**\n   * Return accepted charsets or best fit based on `charsets`.\n   *\n   * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n   * an array sorted by quality is returned:\n   *\n   *     ['utf-8', 'utf-7', 'iso-8859-1']\n   *\n   * @param {string|!Array<string>} [charsets]\n   * @param {...string} args\n   */\n  charsets(charsets, ...args) {\n    // support flattened arguments\n    if (charsets && !Array.isArray(charsets)) {\n      charsets = [charsets, ...args]\n    }\n\n    // no charsets, return all requested charsets\n    if (!charsets || charsets.length == 0) {\n      return this.negotiator.charsets()\n    }\n\n    return this.negotiator.charsets( /** @type {!Array<string>} */\n      (charsets))[0] || false\n  }\n  get charset() {\n    return this.charsets\n  }\n  /**\n   * Return accepted languages or best fit based on `langs`.\n   *\n   * Given `Accept-Language: en;q=0.8, es, pt`\n   * an array sorted by quality is returned:\n   *\n   *     ['es', 'pt', 'en']\n   *\n   * @param {string|!Array<string>} [languages]\n   * @param {...string} args\n   */\n  languages(languages, ...args) {\n    // support flattened arguments\n    if (languages && !Array.isArray(languages)) {\n      languages = [languages, ...args]\n    }\n\n    // no languages, return all requested languages\n    if (!languages || languages.length == 0) {\n      return this.negotiator.languages()\n    }\n\n    return this.negotiator.languages(\n      /** @type {!Array<string>} */ (languages))[0] || false\n  }\n  get lang() {\n    return this.languages\n  }\n  get langs() {\n    return this.languages\n  }\n  get language() {\n    return this.languages\n  }\n}\n\n/**\n * Convert extnames to mime.\n * @param {string} type\n * @private\n */\nfunction extToMime(type) {\n  return type.indexOf('/') == -1\n    ? lookup(type)\n    : type\n}\n\n/**\n * Check if mime is valid.\n * @param {string} type\n * @private\n */\nfunction validMime(type) {\n  return typeof type == 'string'\n}\n\n/**\n * @license MIT\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * https://npmjs.org/accepts\n */\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingMessage} http.IncomingMessage\n */","import '../types/externs'\nimport Accepts from './'\n\nmodule.exports = Accepts"],
"names":["simpleCharsetRegExp","parseAcceptCharset","accept","split","accepts","map","a","i","match","exec","trim","str","charset","q","params","j","length","p","parseFloat","filter","res","Boolean","preferredCharsets","provided","undefined","isQuality","sort","compareSpecs","getFullCharset","priorities","type","priority","o","s","spec","toLowerCase","indexOf","b","simpleEncodingRegExp","parseAcceptEncoding","hasIdentity","minQuality","encoding","specify","Math","min","index","preferredEncodings","getFullEncoding","getPriority","getEncoding","simpleLanguageRegExp","parseAcceptLanguage","language","parseLanguage","prefix","suffix","full","preferredLanguages","getFullLanguage","getLanguage","simpleMediaTypeRegExp","parseAccept","quoteCount","mediaType","parseMediaType","Object","create","subtype","parameters","kvps","splitKeyValuePair","pair","key","value","val","substr","keys","every","k","preferredMediaTypes","getFullType","getType","string","count","Negotiator","request","headers","available","set","charsets","encodings","languages","mediaTypes","extname","path","db","require","extensions","types","populateMaps","preference","forEach","mime","exts","e","from","to","Accepts","req","negotiator","args","Array","isArray","mimes","extToMime","validMime","first","module","exports"]
}
